datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id Int @id @default(autoincrement())
  email String? @unique
  password String?
  nickname String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  posts Post[]
  post_comments PostComment[]
  post_likes PostLike[]
  post_dislikes PostDislike[]
  proposed_topics ProposedTopic[]
  proposed_topic_likes ProposedTopicLike[]
  proposed_topic_dislikes ProposedTopicDislike[]
  this_week_topics ThisWeekTopic[]
}

model Post {
  id Int @id @default(autoincrement())
  title String
  content String
  like_count Int @default(0)
  dislike_count Int @default(0)
  views Int @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  user_id Int

  @@index([user_id])

  comments PostComment[]
}

model PostComment {
  id Int @id @default(autoincrement())
  content String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  user_id Int?
  post_id Int

  @@index([user_id])
  @@index([post_id])
}

model PostLike {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  user_id Int
  post_id Int

  @@id(name: "id", [user_id, post_id])
}

model PostDislike {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  user_id Int
  post_id Int

  @@id(name: "id", [user_id, post_id])
}

enum EDebateCategory {
  politics_society
  economy_finance
  culture_arts
  science_technology
  sports_entertainment
  environment_sustainability
  education_scholarship
  health_well_being
  religion_philosophy
  history_anthropology
}

model ProposedTopic {
  id Int @id @default(autoincrement())
  topic String
  propose_reason String
  category EDebateCategory
  like_count Int @default(0)
  dislike_count Int @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  user_id Int?

  @@index([user_id])

  proposed_topic_likes ProposedTopicLike[]
  proposed_topic_dislikes ProposedTopicDislike[]
}

model ProposedTopicLike {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  proposed_topic ProposedTopic @relation(fields: [proposed_topic_id], references: [id], onDelete: Cascade)
  
  user_id Int
  proposed_topic_id Int

  @@id(name: "id", [user_id, proposed_topic_id])

  @@index([proposed_topic_id])
}

model ProposedTopicDislike {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  proposed_topic ProposedTopic @relation(fields: [proposed_topic_id], references: [id], onDelete: Cascade)
  
  user_id Int
  proposed_topic_id Int

  @@id(name: "id", [user_id, proposed_topic_id])

  @@index([proposed_topic_id])
}

model ThisWeekTopic {
  id Int @id @default(autoincrement())
  topic String
  propose_reason String
  category EDebateCategory
  like_count Int
  dislike_count Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  user_id Int?

  @@index([user_id])
}