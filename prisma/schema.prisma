datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum EDebateCategory {
  politics_society
  economy_finance
  culture_arts
  science_technology
  sports_entertainment
  environment_sustainability
  education_scholarship
  health_well_being
  religion_philosophy
  history_anthropology
}

enum EDebateType {
  proponentOpponent
}

enum EPostCategory {
  general
  politics_society
  economy_finance
  culture_arts
  science_technology
  sports_entertainment
  environment_sustainability
  education_scholarship
  health_well_being
  religion_philosophy
  history_anthropology
}

enum EDebateRole {
  Proponent
  Opponent
  ProponentSupporter
  OpponentSupporter
  Audience
}

enum EGender {
  male 
  female
}

enum EAgeGroup {
  teens
  twenties
  thirties
  forties
  fifty_and_over
}

enum EDebateStatus {
  in_debate
  under_evaluation
  end
}

enum EEvaluation {
  proponent
  opponent
}

model Admin {
  id Int @id @default(autoincrement())
  email String? @unique
  password String?
  nickname String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  notices Notice[]
}

model User {
  id Int @id @default(autoincrement())
  email String? @unique
  password String?
  nickname String @unique
  gender EGender?
  age_group EAgeGroup?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  posts Post[]
  post_comments PostComment[]
  post_reactions PostReaction[]
  proposed_topics ProposedTopic[]
  proposed_topic_ballets ProposedTopicBallet[]
  this_week_topics ThisWeekTopic[]
  debate_messages DebateMessage[]
  debate_support_messages DebateSupportMessage[]
  debate_comments DebateComment[]
  debate_message_archives DebateMessageArchive[]
  debate_support_message_archives DebateSupportMessageArchive[]
  debate_archives DebateArchive[]
  debate_evaluation_ballets DebateEvaluationBallet[]
  joined_user_debate_role JoinedUserDebateRole[]
}

model Notice {
  id Int @id @default(autoincrement())
  title String
  content String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  admin Admin? @relation(fields: [admin_id], references: [id], onDelete: SetNull)

  admin_id Int?

  @@index([admin_id])
}

model Post {
  id Int @id @default(autoincrement())
  title String
  content String
  like_count Int @default(0)
  dislike_count Int @default(0)
  comment_count Int @default(0)
  views Int @default(0)
  category EPostCategory
  is_blocked Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  user_id Int?

  @@index([user_id])

  comments PostComment[]
  post_reactions PostReaction[]
}

model PostComment {
  id Int @id @default(autoincrement())
  content String?
  indent Int
  child_comments_count Int @default(0)
  is_deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  user_id Int?
  post_id Int
  parent_comment_id Int?

  @@index([user_id])
  @@index([post_id])
}

enum Reaction {
  like
  dislike
}

model PostReaction {
  reaction Reaction
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  user_id Int?
  user_id_copy Int
  post_id Int

  @@id(name: "id", [user_id_copy, post_id])

  @@index([user_id])
  @@index([post_id])
}

model ProposedTopic {
  id Int @id @default(autoincrement())
  topic String
  propose_reason String
  category EDebateCategory
  debate_type EDebateType
  vote_count Int @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  user_id Int?

  @@index([user_id])

  proposed_topic_ballets ProposedTopicBallet[]
}

model ProposedTopicBallet {
  gender EGender
  age_group EAgeGroup
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)
  proposed_topic ProposedTopic @relation(fields: [proposed_topic_id], references: [id], onDelete: Cascade)
  
  user_id Int?
  user_id_copy Int
  proposed_topic_id Int

  @@id(name: "id", [user_id_copy, proposed_topic_id])

  @@index([proposed_topic_id])
  @@index([user_id])
}

model ThisWeekTopic {
  id Int @id @default(autoincrement())
  topic String
  propose_reason String
  category EDebateCategory
  vote_count Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  user_id Int?

  @@index([user_id])

  debate_room DebateRoom?
}

model DebateRoom {
  id String @id @default(cuid())
  status EDebateStatus

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  this_week_topic ThisWeekTopic @relation(fields: [this_week_topic_id], references: [id], onDelete: Cascade)

  this_week_topic_id Int @unique

  debate_messages DebateMessage[]
  debate_support_messages DebateSupportMessage[]
  debate_comments DebateComment[]
  joined_user_debate_roles JoinedUserDebateRole[]
  debate_evaluation_ballets DebateEvaluationBallet[]
  debate_evaluation_statistics_archive DebateEvaluationStatisticsArchive?
}

model JoinedUserDebateRole {
  debate_role EDebateRole
  debate_role_kr String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  debate_room DebateRoom @relation(fields: [debate_room_id], references: [id], onDelete: Cascade)

  user_id Int
  debate_room_id String

  @@index([debate_room_id])

  @@id(name: "id", [user_id, debate_room_id])
}

model DebateMessage {
  id Int @id @default(autoincrement())
  payload String
  debate_role EDebateRole
  debate_role_kr String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  debate_room DebateRoom @relation(fields: [debate_room_id], references: [id], onDelete: Cascade)
  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  debate_room_id String
  user_id Int?

  @@index([debate_room_id])
  @@index([user_id])
}

model DebateSupportMessage {
  id Int @id @default(autoincrement())
  payload String
  debate_role EDebateRole

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  debate_room DebateRoom @relation(fields: [debate_room_id], references: [id], onDelete: Cascade)
  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  debate_room_id String
  user_id Int?

  @@index([debate_room_id])
  @@index([user_id])
}

model DebateComment {
  id Int @id @default(autoincrement())
  payload String
  debate_role EDebateRole

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  debate_room DebateRoom @relation(fields: [debate_room_id], references: [id], onDelete: Cascade)
  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  debate_room_id String
  user_id Int?

  @@index([debate_room_id])
  @@index([user_id])
}

model Schedule {
  id String @id
  name String @unique
}

model DebateEvaluationBallet {
  gender EGender
  age_group EAgeGroup
  evaluation EEvaluation

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)
  debate_room DebateRoom @relation(fields: [debate_room_id], references: [id], onDelete: Cascade)

  user_id Int?
  user_id_copy Int
  debate_room_id String

  @@index([user_id])
  @@index([debate_room_id])

  @@id(name: "id", [user_id_copy, debate_room_id])
}

model DebateArchive {
  id Int @id @default(autoincrement())
  title String
  propose_reason String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  proposer User? @relation(fields: [proposer_id], references: [id], onDelete: SetNull)

  debate_message_archives DebateMessageArchive[]
  debate_support_message_archives DebateSupportMessageArchive[]
  debate_evaluation_statistics_archives DebateEvaluationStatisticsArchive[]

  proposer_id Int?

  @@index([proposer_id])
}

model DebateMessageArchive {
  id Int @id @default(autoincrement())
  payload String
  debate_role EDebateRole
  debate_role_kr String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  debate_archive DebateArchive @relation(fields: [debate_archive_id], references: [id], onDelete: Cascade)
  proposer User? @relation(fields: [proposer_id], references: [id], onDelete: SetNull)

  debate_archive_id Int
  proposer_id Int?

  @@index([debate_archive_id])
  @@index([proposer_id])
}

model DebateSupportMessageArchive {
  id Int @id @default(autoincrement())
  payload String
  debate_role EDebateRole

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  debate_archive DebateArchive @relation(fields: [debate_archive_id], references: [id], onDelete: Cascade)
  proposer User? @relation(fields: [proposer_id], references: [id], onDelete: SetNull)

  debate_archive_id Int
  proposer_id Int?

  @@index([debate_archive_id])
  @@index([proposer_id])
}

model DebateEvaluationStatisticsArchive {
  id Int @id @default(autoincrement())
  proponent_male Int
  proponent_female Int
  proponent_teens Int
  proponent_twenties Int
  proponent_thirties Int
  proponent_forties Int
  proponent_fifty_and_over Int
  opponent_male Int
  opponent_female Int
  opponent_teens Int
  opponent_twenties Int
  opponent_thirties Int
  opponent_forties Int
  opponent_fifty_and_over Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  debate_room DebateRoom? @relation(fields: [debate_room_id], references: [id], onDelete: SetNull)
  debate_archive DebateArchive? @relation(fields: [debate_archive_id], references: [id], onDelete: Cascade)
  
  debate_room_id String? @unique
  debate_archive_id Int?

  @@index([debate_archive_id])
}