datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum EDebateCategory {
  politics_society
  economy_finance
  culture_arts
  science_technology
  sports_entertainment
  environment_sustainability
  education_scholarship
  health_well_being
  religion_philosophy
  history_anthropology
}

enum EPostCategory {
  general
  politics_society
  economy_finance
  culture_arts
  science_technology
  sports_entertainment
  environment_sustainability
  education_scholarship
  health_well_being
  religion_philosophy
  history_anthropology
}

enum EGender {
  male 
  female
}

enum EAgeGroups {
  teens
  twenties
  thirties
  forties
  fifty_and_over
}

model Admin {
  id Int @id @default(autoincrement())
  email String? @unique
  password String?
  nickname String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  notices Notice[]
}

model User {
  id Int @id @default(autoincrement())
  email String? @unique
  password String?
  nickname String @unique
  gender EGender?
  age_group EAgeGroups?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  posts Post[]
  post_comments PostComment[]
  post_reactions PostReaction[]
  proposed_topics ProposedTopic[]
  proposed_topic_reactions ProposedTopicReaction[]
  this_week_topics ThisWeekTopic[]
  debate_messages DebateMessage[]
  debate_support_messages DebateSupportMessage[]
  debate_comments DebateComment[]
}

model Notice {
  id Int @id @default(autoincrement())
  title String
  content String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  admin Admin? @relation(fields: [admin_id], references: [id], onDelete: SetNull)

  admin_id Int?

  @@index([admin_id])
}

model Post {
  id Int @id @default(autoincrement())
  title String
  content String
  like_count Int @default(0)
  dislike_count Int @default(0)
  views Int @default(0)
  category EPostCategory

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)


  user_id Int

  @@index([user_id])

  comments PostComment[]
  post_reactions PostReaction[]
}

model PostComment {
  id Int @id @default(autoincrement())
  content String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  user_id Int?
  post_id Int

  @@index([user_id])
  @@index([post_id])
}

enum Reaction {
  like
  dislike
}

model PostReaction {
  reaction Reaction
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  user_id Int
  post_id Int

  @@id(name: "id", [user_id, post_id])

  @@index([post_id])
}

model ProposedTopic {
  id Int @id @default(autoincrement())
  topic String
  propose_reason String
  category EDebateCategory
  like_count Int @default(0)
  dislike_count Int @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  user_id Int?

  @@index([user_id])

  proposed_topic_reactions ProposedTopicReaction[]
}

model ProposedTopicReaction {
  reaction Reaction

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  proposed_topic ProposedTopic @relation(fields: [proposed_topic_id], references: [id], onDelete: Cascade)
  
  user_id Int
  proposed_topic_id Int

  @@id(name: "id", [user_id, proposed_topic_id])

  @@index([proposed_topic_id])
}

model ThisWeekTopic {
  id Int @id @default(autoincrement())
  topic String
  propose_reason String
  category EDebateCategory
  like_count Int
  dislike_count Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  user_id Int?

  @@index([user_id])

  debate_room DebateRoom?
}

model DebateRoom {
  id String @id @default(cuid())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  this_week_topic ThisWeekTopic @relation(fields: [this_week_topic_id], references: [id], onDelete: Cascade)

  this_week_topic_id Int @unique

  debate_messages DebateMessage[]
  debate_support_messages DebateSupportMessage[]
  debate_comments DebateComment[]
  selected_debate_messages SelectedDebateMessage[]
  joined_user_debate_roles JoinedUserDebateRole[]
}

enum EDebateRole {
  Proponent
  Opponent
  ProponentSupporter
  OpponentSupporter
  Audience
}

model JoinedUserDebateRole {
  debate_role EDebateRole
  debate_role_kr String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  debate_room DebateRoom @relation(fields: [debate_room_id], references: [id], onDelete: Cascade)

  user_id Int
  debate_room_id String

  @@index([debate_room_id])

  @@id(name: "id", [user_id, debate_room_id])
}

model DebateMessage {
  id Int @id @default(autoincrement())
  payload String
  debate_role EDebateRole
  debate_role_kr String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  debate_room DebateRoom @relation(fields: [debate_room_id], references: [id], onDelete: Cascade)
  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  debate_room_id String
  user_id Int?

  @@index([debate_room_id])
  @@index([user_id])
}

model DebateSupportMessage {
  id Int @id @default(autoincrement())
  payload String
  debate_role EDebateRole

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  debate_room DebateRoom @relation(fields: [debate_room_id], references: [id], onDelete: Cascade)
  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  debate_room_id String
  user_id Int?

  @@index([debate_room_id])
  @@index([user_id])
}

model DebateComment {
  id Int @id @default(autoincrement())
  payload String
  debate_role EDebateRole

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  debate_room DebateRoom @relation(fields: [debate_room_id], references: [id], onDelete: Cascade)
  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  debate_room_id String
  user_id Int?

  @@index([debate_room_id])
  @@index([user_id])
}

model SelectedDebateMessage {
  id Int @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  debate_room DebateRoom @relation(fields: [debate_room_id], references: [id], onDelete: Cascade)

  debate_room_id String

  @@index([debate_room_id])
}